name: Build website

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Get pip cache dir
        id: pip-get-cache
        run: |
          echo "pip_cache=$(pip cache dir)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        with:
          path: ${{ env.pip_cache }}
          key: deploy-${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            deploy-${{ runner.os }}-pip-
      - name: Generate post from jupyter notebook
        run: |
          pip install -r website/scripts/requirements.txt
          python website/scripts/parse_notebook.py
      - uses: actions/setup-node@v3
        with:
          cache: npm
          cache-dependency-path: "**/package-lock.json"
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            website/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
      - name: Install node dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        working-directory: website
        run: |
          if [ -e package-lock.json ]; then
            npm ci --prefer-offline --no-audit
          else
            npm i
          fi
      - name: Test Build
        working-directory: website
        run: npm run build
      - name: Copy firebase files
        working-directory: website
        run: |
          cp .firebaserc build
          cp firebase.json build
      - uses: actions/upload-artifact@v3
        with:
          name: website-build
          path: website/build

  deploy-preview:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'push'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: website-build
          path: website/build
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v1.2
        with:
          publish-dir: "./website/build"
          production-branch: master
          github-token: ${{ secrets.BOT_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-commit-comment: false
          github-deployment-environment: staging
          alias: preview-${{ github.event.number }}
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 3

  report-site:
    runs-on: ubuntu-latest
    needs: deploy-preview
    if: github.event_name != 'push'
    steps:
      - uses: actions/checkout@v3
      - name: Audit URLs using Lighthouse
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            https://preview-$PR_NUMBER--zootopi.netlify.app/
          configPath: ./.github/workflows/lighthousesrc.json
          uploadArtifacts: false
          temporaryPublicStorage: true
        env:
          PR_NUMBER: ${{ github.event.pull_request.number}}
      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const result = ${{ steps.lighthouse_audit.outputs.manifest }}[0].summary
            const links = ${{ steps.lighthouse_audit.outputs.links }}
            const formatResult = (res) => Math.round((res * 100))
            Object.keys(result).forEach(key => result[key] = formatResult(result[key]))
            const score = res => res >= 90 ? 'üü¢' : res >= 50 ? 'üü†' : 'üî¥'
            const comment = [
                `‚ö°Ô∏è [Lighthouse report](${Object.values(links)[0]}) for the changes in this PR:`,
                '| Category | Score |',
                '| --- | --- |',
                `| ${score(result.performance)} Performance | ${result.performance} |`,
                `| ${score(result.accessibility)} Accessibility | ${result.accessibility} |`,
                `| ${score(result['best-practices'])} Best practices | ${result['best-practices']} |`,
                `| ${score(result.seo)} SEO | ${result.seo} |`,
                `| ${score(result.pwa)} PWA | ${result.pwa} |`,
                ' ',
                `*Lighthouse ran on [${Object.keys(links)[0]}](${Object.keys(links)[0]})*`
            ].join('\n')
            core.setOutput("comment", comment);
      - name: Add Lighthouse stats as comment
        id: comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v2.2.1
        with:
          GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
          number: ${{ github.event.pull_request.number }}
          header: lighthouse
          message: ${{ steps.format_lighthouse_score.outputs.comment }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: website-build
          path: website/build
      - name: Deploy üöÄ
        uses: JamesIves/github-pages-deploy-action@4.4.1
        with:
          branch: ${{ secrets.DEPLOYMENT_BRANCH }}
          folder: website/build
          token: ${{ secrets.BOT_TOKEN }}
